<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kotaro Oshio(押尾光太郎) - Libertang(自由探戈)</title>
    <url>/2022/08/28/Guitar-002-Kotaro-Oshio-%E6%8A%BC%E5%B0%BE%E5%85%89%E5%A4%AA%E9%83%8E-Libertang-%E8%87%AA%E7%94%B1%E6%8E%A2%E6%88%88/</url>
    <content><![CDATA[<p>Kotaro Oshio(押尾光太郎) （<a href="https://www.kotaro-oshio.com/">官網</a>）</p>
<p>Libertang (自由探戈，又名現實交會三分鐘)</p>
<p>這是手風琴大師皮耶左拉 (Astor Piazzolla)的大作</p>
<p>應該有很多人聽過這首曲子才是</p>
<p>馬友友也曾演奏過這曲子</p>
<p>想讓大家聽聽吉他版的風味</p>
<p>由押尾桑操刀, 品質當然不在話下。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/PHD_e5QE_N4" title="Libertang(自由探戈)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>Guitar</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>Kanaho 奏帆 - November (Masaaki Kishibe)</title>
    <url>/2022/09/09/Guitar-004-Kanaho-%E5%A5%8F%E5%B8%86-November-Masaaki-Kishibe/</url>
    <content><![CDATA[<p>Kanaho (奏帆)（<a href="https://www.facebook.com/profile.php?id=100050262229098">官網</a>）</p>
<p>選了一首她早期演奏岸部真明的曲子，</p>
<p>曲名是：November</p>
<p>或許是當時青澀年紀</p>
<p>然就演奏的部份已經是滿好狀態</p>
<p>但流露出的意味，還是與原作有相當大的不同(至少給我的感受是如此)</p>
<p>讓大家看一下兩個人的演奏</p>
<p>或許大家也會有不一樣的感受</p>
<p>曲名：November (Masaaki Kishibe)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/CSNsBPhNBiI" title="November" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<p>曲名：November (Cover by Kanano)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nllg1L5XSqM" title="November" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>Guitar</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2022/08/17/Hexo-001-Hello-/</url>
    <content><![CDATA[<p><a href="https://hexo.io/">Hexo</a> 是快速、簡單的網誌框架，透過 Node.js 執行檔案產生，並支援 GitHub Markdown 的功能。並可搭配布署指令把網站部署到 GitHub Pages。</p>
<h2 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h2><h3 id="建立新文章"><a href="#建立新文章" class="headerlink" title="建立新文章"></a>建立新文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>相關寫作資訊：<a href="https://hexo.io/docs/writing.html">參考連結</a></p>
<h3 id="啟動伺服器"><a href="#啟動伺服器" class="headerlink" title="啟動伺服器"></a>啟動伺服器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>相關伺服器資訊: <a href="https://hexo.io/docs/server.html">參考連結</a></p>
<h3 id="產生靜態檔案"><a href="#產生靜態檔案" class="headerlink" title="產生靜態檔案"></a>產生靜態檔案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>相關資訊: <a href="https://hexo.io/docs/generating.html">參考連結</a></p>
<h3 id="布署至遠端伺服器"><a href="#布署至遠端伺服器" class="headerlink" title="布署至遠端伺服器"></a>布署至遠端伺服器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>相關布署資訊: <a href="https://hexo.io/docs/one-command-deployment.html">參考連結</a></p>
<h3 id="Hexo-相關資訊"><a href="#Hexo-相關資訊" class="headerlink" title="Hexo 相關資訊"></a>Hexo 相關資訊</h3><p><a href="https://hexo.io/">Hexo官方網站</a> </p>
<p><a href="https://hexo.io/docs/">Hexo文件</a></p>
<p><a href="https://hexo.io/docs/troubleshooting.html">Hexo排錯</a> </p>
<p><a href="https://github.com/hexojs/hexo/issues">Hexo GitHub</a>.</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotaro Oshio(押尾光太郎) - あの夏の白い雲(白色夏季雲)</title>
    <url>/2022/08/28/Guitar-001-Kotaro-Oshio-%E6%8A%BC%E5%B0%BE%E5%85%89%E5%A4%AA%E9%83%8E-%E3%81%82%E3%81%AE%E5%A4%8F%E3%81%AE%E7%99%BD%E3%81%84%E9%9B%B2-%E7%99%BD%E8%89%B2%E5%A4%8F%E5%AD%A3%E9%9B%B2/</url>
    <content><![CDATA[<p>Kotaro Oshio(押尾光太郎) （<a href="https://www.kotaro-oshio.com/">官網</a>）</p>
<p>押尾桑於1968&#x2F;02&#x2F;01出生於日本大阪</p>
<p>他的音樂被歸類在pop、new age、jazz等領域</p>
<p>他常用的技巧有finger picking、tab harmonics 還有一種他很獨特的叫”Nail Attack”</p>
<p>聽他的作品也一陣子了</p>
<p>是聽不膩的那一型喔</p>
<p>押尾桑很愛笑</p>
<p>如果各位有去看一些他在網路上的曲子就可以知道我的意思</p>
<p>有時候覺得押尾桑有點笑到傻掉的樣子(這只是題外話啦！大家不要太介意我的說法)</p>
<p>Anyway，只能用厲害兩個字來形容押尾桑</p>
<p>給各位一首他的曲子</p>
<p>曲名叫：あの夏の白い雲(白色夏季雲)</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/lf95QMuaoY8" title="あの夏の白い雲(白色夏季雲)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>Guitar</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>Masaaki Kishibe(岸部真明) - Hajimari(啟航)</title>
    <url>/2022/08/28/Guitar-003-Masaaki-Kishibe-%E5%B2%B8%E9%83%A8%E7%9C%9F%E6%98%8E-Hajimari-%E5%95%9F%E8%88%AA/</url>
    <content><![CDATA[<p>Masaaki Kishibe(岸部真明)（<a href="https://masaaki-kishibe.com/">官網</a>）</p>
<p>日本的一個Finger Style名人</p>
<p>1964出生在大阪</p>
<p>有人說他的音樂有一種清新的感覺</p>
<p>我也認為的確有他自己清新的味道</p>
<p>對這位吉他大師的第一個印象就是他好像都戴著帽子</p>
<p>整個Fu就跟其他的吉他手不太一樣</p>
<p>網路上並沒有太多關於他的介紹</p>
<p>我還是去挖了他不少的音樂來聽聽看</p>
<p>選一首自己認為很舒服的曲子給大家</p>
<p>曲名叫：Hajimari(啟航) </p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/fHdPy8CfzXE" title="Hajimari(啟航)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>Guitar</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>反射機制</title>
    <url>/2022/08/23/Java-001-%E5%8F%8D%E5%B0%84%E6%A9%9F%E5%88%B6/</url>
    <content><![CDATA[<p>Reflection is a feature in the Java programming language. It allows an executing Java program to examine or “introspect” upon itself, and manipulate internal properties of the program. For example, it’s possible for a Java class to obtain the names of all its members and display them. (<a href="https://www.oracle.com/technical-resources/articles/java/javareflection.html">https://www.oracle.com/technical-resources/articles/java/javareflection.html</a>)</p>
<p>一般而言，我們會訂義interface來描述不同類別的共通行為。以ITest為例，定義了一個testReflect的method，而ITestImpl1及ITestImpl2分別去實作ITest。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ITestImpl1</span> <span class="keyword">implements</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflect</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I am ITestImpl1 !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ITestImpl2</span> <span class="keyword">implements</span> <span class="title class_">ITest</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflect</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I am ITestImpl2 !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceMain</span> &#123;</span><br><span class="line">  <span class="comment">//降低耦合度（通過介面來實現）</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//普通寫法，使用New 關鍵字</span></span><br><span class="line">    <span class="type">ITest</span> <span class="variable">iTest</span> <span class="operator">=</span> createITest(<span class="string">&quot;ITestImpl1&quot;</span>);</span><br><span class="line">    iTest.testReflect();</span><br><span class="line">    <span class="type">ITest</span> <span class="variable">iTest2</span> <span class="operator">=</span> createITest(<span class="string">&quot;ITestImpl2&quot;</span>);</span><br><span class="line">    iTest2.testReflect();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//createITest 普通寫法，使用New關鍵字, 缺點, 每新加一種實作, 就需加入程式段落判斷</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ITest <span class="title function_">createITest1</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.equals(<span class="string">&quot;ITestImpl1&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ITestImpl1</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;ITestImpl2&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ITestImpl2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>透過interface的實作，可以有效降低程式的偶合，但也有其相對的缺點，每新加一種實作, 就需加入程式段落判斷！當實作的類別多了，就會是一種困擾。</p>
<p><strong>要怎麼讓這個每新加一種實作，就需加入程式段落判斷的狀況消除，讓程式可以自動調配，可以使用 Reflection 這個機制來達成。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionMain</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//使用反射機制</span></span><br><span class="line">    <span class="comment">// class forName 需要包含 package</span></span><br><span class="line">    <span class="type">ITest</span> <span class="variable">iTest1</span> <span class="operator">=</span> createITest(<span class="string">&quot;ITestImpl1&quot;</span>);</span><br><span class="line">    iTest1.testReflect();</span><br><span class="line">    <span class="type">ITest</span> <span class="variable">iTest2</span> <span class="operator">=</span> createITest(<span class="string">&quot;ITestImpl2&quot;</span>);</span><br><span class="line">    iTest2.testReflect();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//createITest 使用反射機制:當有N個不同ITest需要建立時，不用針對每個建立ITest物件   </span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ITest <span class="title function_">createITest2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// class forName 需要包含 package</span></span><br><span class="line">      Class&lt;?&gt; clazz = Class.forName(name);</span><br><span class="line">      <span class="keyword">return</span> (ITest) clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>createITest2 就是利用反射機制”動態”的建立物件，讓程式可以自動去適應新的實作類別。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Regular Expression</title>
    <url>/2022/09/24/Java-003-Regular-Expression/</url>
    <content><![CDATA[<p>正規表示式(Regular Expression)用以針對特定內文做其搜尋、比對、取代等的模式。</p>
<p>這裡有一個測試正則表達式滿方便的網站（<a href="https://regex101.com/">regex101.com</a>），可以去在這裡設計你想要做比對、檢核的正規表示式。</p>
<p>在Java中，在許多場景也會需要進行對文字內容做搜尋、比對、取代。針對這三個場景，都各用一個簡單的範例，來感受一下正規表示式的方便，當然，前提還是得對該表示式有一些認識才可以。</p>
<p><strong>搜尋、比對</strong>，如想要針對一個文字段落中檢查是否存在IP的格式。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 透過 Regular Expressions 來檢視字串中是否有符合 ipv4 的格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ipString</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://192.168.0.200:5432/ooxx&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ipv4Pattern</span> <span class="operator">=</span> <span class="string">&quot;(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.)&#123;3&#125;([01]?\\d\\d?|2[0-4]\\d|25[0-5])&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(ipv4Pattern);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(ipString);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">matchFound</span> <span class="operator">=</span> matcher.find();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(matchFound) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Match&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Not Match&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (matchFound) &#123;</span><br><span class="line">  System.out.println(matcher.group());</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>範列程式中的2-3行為檢測的文字內容與正規表示式的格式。而5-13行則是Java中進行比對與搜尋的method。若檢查文字裡有符合正規表示式的格式則回傳<strong>Match</strong>，反之則回傳<strong>Not Match</strong>。</p>
<p>而若想要取得符合表示式的段落內容，參照第16行matcher.group()，就可以取得。</p>
<p><strong>替代</strong>，如想要針對一個文字段落中符合的格式進行取代。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#123;&#123;&#123;1000&#125;10&#125;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">replacedValue</span> <span class="operator">=</span> values.replaceAll(<span class="string">&quot;([&#123;&#125;])&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(replacedValue);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<p>範列程式中透過 Regular Expressions 把 大括號 取代成空白。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>思想選擇</title>
    <url>/2022/08/21/Murmur-001-%E6%80%9D%E6%83%B3%E9%81%B8%E6%93%87/</url>
    <content><![CDATA[<p>正思想然後言論正</p>
<p>我們無法阻擋別人的言語</p>
<p>但，我們能選擇進入心房的語句。</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>心的廣度</title>
    <url>/2022/08/22/Murmur-002-%E5%BF%83%E7%9A%84%E5%BB%A3%E5%BA%A6/</url>
    <content><![CDATA[<p>孩子要懂得珍惜周遭人、事、物</p>
<p>更要懂得原諒與接受原諒</p>
<p>心，該是很寬廣的。</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>Mockito：doReturn與 thenReturn</title>
    <url>/2022/09/14/Java-002-Mockito-doReturn-thenReturn/</url>
    <content><![CDATA[<p>Mokito（<a href="https://site.mockito.org/">官網</a>）<br>Mokito是一個針對Java單元測試可口的模擬框架(Tasty mocking framework for unit tests in Java)。</p>
<p>這裡針對Mokito在執行單元測試時，呼叫Method時如何定義它的回傳，Mockito可以使用以下兩種方式來達成。  </p>
<ol>
<li>when-thenReturn  </li>
<li>doReturn-when</li>
</ol>
<p>在大部份的場景下，使用when-thenReturn，在測試程式的撰寫過程具較佳的可讀性。</p>
<p><strong>when-thenReturn</strong> 與 <strong>doReturn-when</strong> 兩者在撰寫測試的時候，有一個最大的差別為型別安全(Type Safety)。前者不具型別安全的檢查，故在撰寫測試的過程，就比較不有寫作上的副作用，例如IDE工具的型別檢查。而後者，則存在型別必須等同mockito的method所回傳的型別。</p>
<p>以下舉個子來說明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockitoService</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">helloMockito</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;hello&quot;</span>.equals(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Hello Mockito&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Bye&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MockBean</span></span><br><span class="line">MockitoService mockitoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTest</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// when-theReturn</span></span><br><span class="line">  when(mockitoService.helloMockito(<span class="string">&quot;123&quot;</span>)).thenReturn(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">valExpected</span> <span class="operator">=</span> mockitoService.helloMockito(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">valReturned</span> <span class="operator">=</span> <span class="string">&quot;Bye&quot;</span>;</span><br><span class="line">  assertEquals(valReturned, valExpected, <span class="string">&quot;expected value eq &quot;</span> + valExpected);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// doReturn-when</span></span><br><span class="line">  doReturn(<span class="number">123</span>).when(mockitoService).helloMockito(anyString());</span><br><span class="line"></span><br><span class="line">  valExpected = <span class="string">&quot;Hello Mockito&quot;</span>;</span><br><span class="line">  valReturned = mockitoService.helloMockito(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  assertEquals(valReturned, valExpected, <span class="string">&quot;expected value eq &quot;</span> + valExpected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>實作一個Spring service class，同時也針對此service class進行單元測試。於單元測試程式裡第7行使用 <strong>when-theReturn</strong>， 而第14行使用 <strong>doReturn-when</strong>。</p>
<p>由於when-theReturn是Type Safety，而我們要測試的目標method回傳型別為String，所以在mocktio return 的value，也必須符合String 型別，所以填入的Bye為String，如此一來執行測試前的編譯才會正常通過。</p>
<p>反之doReturn-when並非Type Safety，在doReturn可以填入Integer的的123，此時在測試前的編譯並不會報錯。但在執行時，則會出現WrongTypeOfReturnValue的狀況。就是一種寫起來比較隨興，但之後得再付出額外成本的感覺。</p>
<p>兩種模式，雖都能達到單元測試的效果，但個人是傾向使用<strong>when-theReturn</strong>，因為一則代表正確理解了要測試的method所回傳的型別或物件。再者如一開頭所言，其閱讀的體驗上也比較好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>思考評判</title>
    <url>/2022/08/25/Murmur-003-%E6%80%9D%E8%80%83%E8%A9%95%E5%88%A4/</url>
    <content><![CDATA[<p>既然，你的心還會跳</p>
<p>你就該用心思考</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>叉路永存</title>
    <url>/2022/08/25/Murmur-004-%E5%8F%89%E8%B7%AF%E6%B0%B8%E5%AD%98/</url>
    <content><![CDATA[<p>別因為你錯過某些路口</p>
<p>就忘了依然有叉路等著你</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>休息</title>
    <url>/2022/08/25/Murmur-005-%E4%BC%91%E6%81%AF/</url>
    <content><![CDATA[<p>不休息的時候</p>
<p>你永遠不知道「你累了」</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>人生之路</title>
    <url>/2022/08/25/Murmur-008-%E4%BA%BA%E7%94%9F%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>人生難得完美</p>
<p>所以需要懂得如何不完美地往下走</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>愛？</title>
    <url>/2022/08/25/Murmur-009-%E6%84%9B%EF%BC%9F/</url>
    <content><![CDATA[<p>有人問：「愛，是什麼？」</p>
<p>我回答：「愛，永遠都是疑問號！」</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>想念 I</title>
    <url>/2022/08/26/Murmur-011-%E6%83%B3%E5%BF%B5I/</url>
    <content><![CDATA[<p>無論睜眼及閉眼</p>
<p>若你懂得想念</p>
<p>它會一直存在</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>轉彎</title>
    <url>/2022/08/25/Murmur-010-%E8%BD%89%E5%BD%8E/</url>
    <content><![CDATA[<p>碰到叉路時，你總須選擇彎向</p>
<p>不然，撞牆的慘劇免不了發生</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>愛情結局</title>
    <url>/2022/08/25/Murmur-007-%E6%84%9B%E6%83%85%E7%B5%90%E5%B1%80/</url>
    <content><![CDATA[<p>愛情結局的圓滿與否</p>
<p>都該在你的心底刻劃痕跡</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>體會快樂</title>
    <url>/2022/08/26/Murmur-013-%E9%AB%94%E6%9C%83%E5%BF%AB%E6%A8%82/</url>
    <content><![CDATA[<p>懂得不快樂後</p>
<p>才能體會快樂</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>相知</title>
    <url>/2022/08/26/Murmur-012-%E7%9B%B8%E7%9F%A5/</url>
    <content><![CDATA[<p>關於心情</p>
<p>說完後若你不懂，沒有關係</p>
<p>但你懂的話，我會投予你一抺微笑</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>誇實</title>
    <url>/2022/08/26/Murmur-014-%E8%AA%87%E5%AF%A6/</url>
    <content><![CDATA[<p>當你宣告著未完成的事已完成時</p>
<p>懸空的心情</p>
<p>理應油然而起 </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>微笑</title>
    <url>/2022/08/26/Murmur-015-%E5%BE%AE%E7%AC%91/</url>
    <content><![CDATA[<p>懂得微笑時</p>
<p>也會懂得冷靜</p>
<p>Go for your life with calming smile. </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>相伴</title>
    <url>/2022/08/28/Murmur-017-%E7%9B%B8%E4%BC%B4/</url>
    <content><![CDATA[<p>知你</p>
<p>而且愛你</p>
<p>是攜手相伴的基石 </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>雨</title>
    <url>/2022/08/28/Murmur-016-%E9%9B%A8/</url>
    <content><![CDATA[<p>聞到雨的味道時</p>
<p>這位哭泣，因為雨小</p>
<p>那位哭泣，因為雨大 </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>未來</title>
    <url>/2022/08/28/Murmur-018-%E6%9C%AA%E4%BE%86/</url>
    <content><![CDATA[<p>當你驚覺時</p>
<p>它已與你擦身而過</p>
<p>在前方看著你，是它特有的表徵 </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>拿捏妝扮</title>
    <url>/2022/08/25/Murmur-006-%E6%8B%BF%E6%8D%8F%E5%A6%9D%E6%89%AE/</url>
    <content><![CDATA[<p>化妝與喬裝只是一線之差</p>
<p>喬裝與偽裝僅距咫呎</p>
<p>拿捏失當就是循環的開始</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>青鳥</title>
    <url>/2022/08/28/Murmur-024-%E9%9D%92%E9%B3%A5/</url>
    <content><![CDATA[<p>不要只因還沒看見你的青鳥就躊躇不前</p>
<p>需要的可能是再一點時間</p>
<p>若你已可以遠眺見你的青鳥</p>
<p>真的只要再一點時間的堅持</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>想念II</title>
    <url>/2022/08/28/Murmur-021-%E6%83%B3%E5%BF%B5II/</url>
    <content><![CDATA[<p>無論睜眼或閉眼</p>
<p>對方的身影如幻燈投射於前</p>
<p>這等強烈，令人著迷卻也焦慮</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>關於做</title>
    <url>/2022/08/28/Murmur-020-%E9%97%9C%E6%96%BC%E5%81%9A/</url>
    <content><![CDATA[<p>做與不做</p>
<p>該做與不該做</p>
<p>不就是一個二乘二矩陣結果嗎？ </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>寶貴的事</title>
    <url>/2022/08/28/Murmur-022-%E5%AF%B6%E8%B2%B4%E7%9A%84%E4%BA%8B/</url>
    <content><![CDATA[<p>這些事如果帶給你與他人共同的愉悅</p>
<p>請保留些時間來做這些事</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>心意</title>
    <url>/2022/08/28/Murmur-025-%E5%BF%83%E6%84%8F/</url>
    <content><![CDATA[<p>若是心意不是用心來衡量</p>
<p>那，要心意做甚!</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>情緒藝術</title>
    <url>/2022/08/28/Murmur-026-%E6%83%85%E7%B7%92%E8%97%9D%E8%A1%93/</url>
    <content><![CDATA[<p>以杯量度</p>
<p>一直處於可搖晃的境界而不溢出</p>
<p>動而均衡堪稱之於情緒藝術</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>品質</title>
    <url>/2022/08/28/Murmur-027-%E5%93%81%E8%B3%AA/</url>
    <content><![CDATA[<p>用金錢、物質衡量出來的品質</p>
<p>與精神衡量出來的品質</p>
<p>那個可以恆久呢？</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>Darfur Now</title>
    <url>/2022/08/22/Poem-002-Darfur-Now/</url>
    <content><![CDATA[<p>你的角色是那一個？</p>
<p>原來，有一個種族名為人類<br>只是，被膚色遺忘<br>被大陸區隔了<br>從言語分離<br>持槍對峙</p>
<p>那是父親的苦痛<br>母親的淚水<br>孩子的無助<br>死亡凝聚<br>流離匯集<br>在黃沙塵塵<br>希望渺渺的Darfur</p>
<p>我的角色是那一個？</p>
<p>原來，有一種不變的精神<br>在孩子眼神中流露<br>沒有區隔<br>沒有分離<br>沒有對峙<br>純真常駐、生命延續<br>竟是一點小小希望</p>
<p>我不是行動派<br>希冀一點言語<br>擊落荼毒煞星</p>
<p>你的角色是那一個？</p>
<pre><code>                零八年六月十四日
</code></pre>
<p>Ps.<br>這部片在描述Darfur的現狀<br>種族仇殺、暴力綿延<br>透過一些人的努力，希望展現一點光明<br>加油。</p>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-002-Darfur-Now.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>Garbage Warrior</title>
    <url>/2022/08/21/Poem-001-Garbage-Warrior/</url>
    <content><![CDATA[<p>我想，你是瘋了<br>存在由無到有的念頭<br>把生命浪費在廢物建築<br>一樣打造美好願景<br>長遠的簡單  </p>
<p>諾亞的傻夢<br>刻劃在你的腦中<br>條規的局限<br>鎖你在不可前進的窘境<br>喪失犯錯的自由？<br>曙光才逐漸顯露  </p>
<p>因為自然動了動身子<br>頓時醒悟了嗎？<br>眼前的渺小<br>才對稱了悲哀<br>請別躊躇<br>蹣跚只會帶來接續的苦難  </p>
<p>我想，你踏出了第一步<br>在奇形怪狀的視界裡<br>我想，我是瘋了<br>為你描述著掙扎的事蹟。  </p>
<pre><code>                零八年六月十一日  
</code></pre>
<p>Ps.<br>這部片，是部值得去看的片子<br>用力想想我們的世界倒底怎麼了</p>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-001-Garbage-Warrior.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>The Great Debaters</title>
    <url>/2022/08/22/Poem-003-The-Great-Debaters/</url>
    <content><![CDATA[<p><span style="color:red">Who’s the judge?</span><br>The judge is God.<br><span style="color:red">Why is God?</span><br>Because he decides who wins or loses not my opponent.<br><span style="color:red">Who is your opponent?</span><br>He doesn’t exist.<br><span style="color:red">Why he does not exist?</span><br>Because he is one voice of dissent against the truth that I speak.</p>
<p>有種色系的悲哀<br>在1930年代<br>眼神對峙<br>誰是弱者</p>
<p>方向是對的<br>不會因為無知而轉向<br>風吹來時<br>不會分辨對象是誰</p>
<p>站穩你的腳跟<br>堅持<br>時代的劃分<br>向正確的方向走</p>
<p>你鏗鏘聲音<br>堅韌的短字<br>己印在心中<br>迴響</p>
<pre><code>                零八年十一月十四日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-003-The-Great-Debaters.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>The Rebound</title>
    <url>/2022/08/22/Poem-005-The-Rebound/</url>
    <content><![CDATA[<p>背叛的瞬間<br>穿越場景的聲音<br>實現了切換<br>舊式藩籬關上<br>開啟<br>需要時間等待</p>
<p>愛情故事的原本<br>埋藏了正確的錯誤<br>配角的眼神笑著<br>話語帶上驚奇<br>交會持續        直至<br>數字上的差異<br>她覺得不行<br>他喊著可以</p>
<p>離開遠走<br>沈澱在最底<br>時間在流<br>空間轉換<br>鏡頭拉回另一個數字<br>她、他<br>覺得可以<br>桌下的雙手執牽</p>
<p>同樣數字上的差異<br>方向是向左或向右<br>拿什麼來考驗?<br>問她?<br>還是他?</p>
<pre><code>                一Ｏ年二月二十六日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-005-The-Rebound.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>Youth Without Youth</title>
    <url>/2022/08/22/Poem-004-Youth-Without-Youth/</url>
    <content><![CDATA[<p>自一開始，你就界定了一個問號<br>放置在劇終的前緣</p>
<p>一道白光燃燒你老去的軀殼<br>褪去了過往<br>映現短暫的新生<br>是誰睿智、是誰？<br>追溯堅持八十個年頭的方向<br>並著新生的異象<br>刻劃著、隱藏著、逃離著、閃躲著<br>找著你的玫瑰<br>指著你的路</p>
<p>下一道白光揭開前進的序幕<br>從第一聲梵語對話開始<br>攜著你的愛離開<br>接著囈出的語言<br>等同拿減損的生命<br>鋪出接近那誰堅持的源頭？</p>
<p>離開，是故事的另一種開始。</p>
<p>用什麼來交易什麼呢？<br>你的愛是嬌人的玫瑰<br>你卻是凋零的那朵</p>
<p>第三朵玫瑰<br>自一開始就放置那兒了</p>
<pre><code>                零九年十一月五日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-004-Youth-Without-Youth.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>第36個故事 Taipei Exchange</title>
    <url>/2022/08/22/Poem-007-%E7%AC%AC36%E5%80%8B%E6%95%85%E4%BA%8B-Taipei-Exchange/</url>
    <content><![CDATA[<p>用故事的開端譜出了場景<br>潟著輕繞的音樂<br>和著淡苦微甜的提拉米蘇<br>品著濃烈的Espresso<br>記憶一開始<br>化成故事<br>故事　　交換著</p>
<p>帶來了香氣的時間<br>要怎麼描述<br>懂得意像的瞬間<br>執筆繪出<br>色彩與時間的結合<br>帶走了我走進了你</p>
<p>記憶並行<br>時間共進<br>端著咖啡香的你<br>等候我<br>接續的故事</p>
<pre><code>                一Ｏ年九月二日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-007-%E7%AC%AC36%E5%80%8B%E6%95%85%E4%BA%8B-Taipei-Exchange.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>＄</title>
    <url>/2022/08/28/Murmur-019-%EF%BC%84/</url>
    <content><![CDATA[<p>這個符號</p>
<p>只是你買通生命的必要元件而已</p>
<p>你該是它的主人、而非它的奴役 </p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>活得如何？</title>
    <url>/2022/08/28/Murmur-023-%E6%B4%BB%E5%BE%97%E5%A6%82%E4%BD%95%EF%BC%9F/</url>
    <content><![CDATA[<p>如果你不需猶疑就能回答出你活得如何</p>
<p>不管是好、是壞</p>
<p>我都會給你我的掌聲。</p>
]]></content>
      <categories>
        <category>Murmur</category>
      </categories>
      <tags>
        <tag>Murmur</tag>
      </tags>
  </entry>
  <entry>
    <title>(500) Days of Summer</title>
    <url>/2022/08/22/Poem-006-500-Days-of-Summer/</url>
    <content><![CDATA[<p>原來生命的線條呈現著某種弧度<br>開始的交會<br>只是時間剛好<br>地點恰巧<br>屬於你的命運<br>不屬於妳的命運<br>挑明地講，卻總是有人愛往下跳</p>
<p>要花一些時間觀察妳的可愛<br>用一點心思瞭解與妳的互動<br>你的前行<br>妳的前行<br>交會的開始<br>交會的結束<br>要花一些時間觀察對妳的恨<br>用一點心思回收對妳的喜歡<br>不屬於你的命運，關閉<br>屬於妳的命運，開啟</p>
<p>時間的刻痕<br>並不是想像中的深<br>大多數的365天<br>不曾記得些什麼<br>在時間剛好<br>地點恰巧<br>屬於他的命運、妳的命運<br>屬於你的命運、她的命運<br>跨了出去<br>交會才會無限延申</p>
<pre><code>                一Ｏ年五月二十六日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-006-500-Days-of-Summer.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>親愛的醫生 Dear Doctor</title>
    <url>/2022/08/22/Poem-009-%E8%A6%AA%E6%84%9B%E7%9A%84%E9%86%AB%E7%94%9F-Dear-Doctor/</url>
    <content><![CDATA[<p>遠處路環著綠意<br>和著緩緩的步伐<br>夾著松青的吆呼<br>也有嫩芽般的嬉戲<br>在放眼的綠意裡<br>竄來流去</p>
<p>呼喊著您的到來<br>已然成了安心呼吸的常態<br>對應著您揚著魚尾紋的話語<br>讓緩慢的生命<br>順著您揚起的紋路<br>走得清爽愉悅</p>
<p>是啊!<br>“他們一個一個離開了村子，過著他們夢寐以求生活。”<br>一屋子滿載的空洞<br>填塞得讓句子喘不過氣<br>交疊的感情<br>在視覺上是一段似而同軌的平行線</p>
<p>您的離去<br>帶走一些希望與信任<br>帶來一些冷清與悵然<br>掉進思索的同時<br>揚著魚尾紋的笑語<br>伴著一杯熱茶溢起了香氣。</p>
<pre><code>                一一年一月七日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-009-%E8%A6%AA%E6%84%9B%E7%9A%84%E9%86%AB%E7%94%9F-Dear-Doctor.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>景氣</title>
    <url>/2022/08/22/Poem-012-%E6%99%AF%E6%B0%A3/</url>
    <content><![CDATA[<p>吹來一陣涼風<br>拉緊衣領<br>走的步伐呈現休息的狀態<br>煥散的眼神<br>望向<br>那一點星光遠遠的地方</p>
<p>把一生託寄於一張紙上<br>是你給的<br>他給的</p>
<p>達成<br>是第一波的上峰<br>未殆<br>是第幾波的下緣<br>形成的反覆<br>與心底的聲?同時<br>呼應</p>
<p>要走多遠呢？<br>要走多久呢？<br>要等多長呢？<br>孩子這樣問著。<br>要等、要等‧‧‧<br>誰，這樣回答著？</p>
<p>它，只是一個無法解釋的名詞<br>不懂或懂<br>存在的意義遠小於擲出去的履歷<br>不想聽惠帝的話語<br>不想看杜工部的文詞<br>捨件衣裳給孩子吧！<br>捨碗飯給溫飽吧！<br>是因為吶喊聲音太小？<br>還是因為距離太遠？<br>只是小小的祈求<br>誰有聽見？</p>
<pre><code>                零八年十二月八日
</code></pre>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>久違了</title>
    <url>/2022/08/22/Poem-010-%E4%B9%85%E9%81%95%E4%BA%86/</url>
    <content><![CDATA[<p>久違了，我的衝動<br>輕吼一聲<br>盪開山嵐<br>風，吹著這個來由<br>涼意夾帶暖流</p>
<p>久違了，我的懦弱<br>踏出一步的思索<br>佔據多少刻鐘<br>雨水刷洗著塵囂<br>映出最末的線條</p>
<p>久違了，我的沈靜<br>用雙眼凝視、雙手緊抱<br>穿透血脈<br>流動下，掙出四面八方的<br>意向</p>
<p>久違了，我的感動<br>停罷<br>重歸振盪</p>
<pre><code>                零八年六月二日 
</code></pre>
<p>　　　　　　　　　　　　　</p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>冰路</title>
    <url>/2022/08/22/Poem-013-%E5%86%B0%E8%B7%AF/</url>
    <content><![CDATA[<p>襲來的風<br>紅了雙頰<br>蒼白了唇</p>
<p>顫著的手<br>曳拖身軀<br>路映前方</p>
<p>來時風雪<br>冷冽<br>回首<br>望穿白原</p>
<p>走過<br>白皓印下<br>接續<br>前進</p>
<pre><code>                一一年一月二十五日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-013-%E5%86%B0%E8%B7%AF.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>虛實二十法 - 白靈</title>
    <url>/2022/09/11/Poem-%E8%99%9B%E5%AF%A6%E4%BA%8C%E5%8D%81%E6%B3%95-%E7%99%BD%E9%9D%88/</url>
    <content><![CDATA[<p>節錄自白靈《一首詩的誔生》</p>
<ol>
<li>象則意之(景則情之)</li>
<li>意則象人(情則景之)</li>
<li>小則大之</li>
<li>大則小之</li>
<li>遠之近之</li>
<li>近則遠之</li>
<li>此覺則彼覺之(感官移位)</li>
<li>靜之動之</li>
<li>動則靜之</li>
<li>主動則被動之</li>
<li>被動則主動之</li>
<li>多則少之</li>
<li>少則多之</li>
<li>正則反之</li>
<li>反則正之</li>
<li>急則緩之</li>
<li>緩則急之</li>
<li>密則疏之</li>
<li>雜則序之</li>
<li>全體則部份之</li>
</ol>
<p>所謂之詩，則在此虛實不定之中。</p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>記錄</title>
    <url>/2022/08/22/Poem-011-%E8%A8%98%E9%8C%84/</url>
    <content><![CDATA[<p>關於生命的描述<br>擺在第幾順位<br>關於靈魂的去留<br>置前或後<br>把雙眼聚焦<br>仔細定位</p>
<p>原本就是脆弱的爭戰<br>從他方來<br>自這裡去<br>短促自由<br>快門捕捉瞬間<br>是你料想得到<br>是我想像不及</p>
<p>關於所有的歷程<br>不該假手他人<br>要呼吸的自我<br>在你剝奪我之前<br>逃脫</p>
<p>卡擦、停止呼吸後<br>流傳</p>
<pre><code>                零八年六月七日				
</code></pre>
<p>Ps.<br>以下是兩張朋友想要我去挖掘的相片<br>我想，我很謝謝她提醒。	</p>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-011-%E8%A8%98%E9%8C%84-1.jpg" alt=" The Falling Man(911)"></p>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-011-%E8%A8%98%E9%8C%84-2.jpg" alt="Trang Bang after a VNAF napalm attack.">				</p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>川本三郎《少了你的餐桌》</title>
    <url>/2023/04/06/Book-001-%E5%B7%9D%E6%9C%AC%E4%B8%89%E9%83%8E-%E5%B0%91%E4%BA%86%E4%BD%A0%E7%9A%84%E9%A4%90%E6%A1%8C/</url>
    <content><![CDATA[<ul>
<li><p>人生有限，很多事物跟食物一樣，「不買」比「買」變得更重要。</p>
</li>
<li><p>寫作真是罪孽深重的報應。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/books/%E5%B0%91%E4%BA%86%E4%BD%A0%E7%9A%84%E9%A4%90%E6%A1%8C-%E5%B7%9D%E6%9C%AC%E4%B8%89%E9%83%8E%20.png"></p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>pg_stat_statements SQL語句統計模組</title>
    <url>/2022/08/24/PostgreSQL-001-pg-stat-statements-SQL%E8%AA%9E%E5%8F%A5%E7%B5%B1%E8%A8%88%E6%A8%A1%E7%B5%84/</url>
    <content><![CDATA[<p>The <code>pg_stat_statements</code> module provides a means for tracking planning and execution statistics of all SQL statements executed by a server.(<a href="https://www.postgresql.org/docs/current/pgstatstatements.html">https://www.postgresql.org/docs/current/pgstatstatements.html</a>)</p>
<h4 id="✔️-最耗IO-SQL，單次調用最耗IO-SQL-TOP-50-milliseconds"><a href="#✔️-最耗IO-SQL，單次調用最耗IO-SQL-TOP-50-milliseconds" class="headerlink" title="✔️ 最耗IO SQL，單次調用最耗IO SQL TOP 50 , milliseconds"></a>✔️ 最耗IO SQL，單次調用最耗IO SQL TOP 50 , milliseconds</h4><p><code>select userid::regrole, dbid, (blk_read_time+blk_write_time) as times , calls , query from pg_stat_statements order by (blk_read_time+blk_write_time)/calls desc limit 50;</code></p>
<h4 id="✔️-總最耗IO-SQL-TOP-50"><a href="#✔️-總最耗IO-SQL-TOP-50" class="headerlink" title="✔️ 總最耗IO SQL TOP 50"></a>✔️ 總最耗IO SQL TOP 50</h4><p><code>select userid::regrole, dbid,  (blk_read_time+blk_write_time) as times,  query from pg_stat_statements order by (blk_read_time+blk_write_time) desc limit 50;</code></p>
<h4 id="✔️-最耗時-SQL，單次調用最耗時-SQL-TOP-50"><a href="#✔️-最耗時-SQL，單次調用最耗時-SQL-TOP-50" class="headerlink" title="✔️ 最耗時 SQL，單次調用最耗時 SQL TOP 50"></a>✔️ 最耗時 SQL，單次調用最耗時 SQL TOP 50</h4><p><code>select userid::regrole, dbid, to_char(mean_time,&#39;999999999999.999&#39;) as min_time , query from pg_stat_statements order by mean_time desc limit 50;</code></p>
<h4 id="✔️-總最耗時-SQL-TOP-50"><a href="#✔️-總最耗時-SQL-TOP-50" class="headerlink" title="✔️ 總最耗時 SQL TOP 50"></a>✔️ 總最耗時 SQL TOP 50</h4><p><code>select userid::regrole, dbid, to_char(total_time,&#39;999999999999.999&#39;) as total_time, query from pg_stat_statements order by total_time desc limit 50;</code></p>
<h4 id="✔️-響應時間振盪最嚴重-SQL"><a href="#✔️-響應時間振盪最嚴重-SQL" class="headerlink" title="✔️ 響應時間振盪最嚴重 SQL"></a>✔️ 響應時間振盪最嚴重 SQL</h4><p><code>select userid::regrole, dbid,to_char(stddev_time,&#39;999999999999.999&#39;) as stddev_time, query from pg_stat_statements order by stddev_time desc limit 50;</code></p>
<h4 id="✔️-最耗共享記憶體-SQL"><a href="#✔️-最耗共享記憶體-SQL" class="headerlink" title="✔️ 最耗共享記憶體 SQL"></a>✔️ 最耗共享記憶體 SQL</h4><p><code>select userid::regrole, dbid,(shared_blks_hit+shared_blks_dirtied) as shared, query from pg_stat_statements order by (shared_blks_hit+shared_blks_dirtied) desc limit 50;</code></p>
<h4 id="✔️-最耗臨時空間-SQL"><a href="#✔️-最耗臨時空間-SQL" class="headerlink" title="✔️ 最耗臨時空間 SQL"></a>✔️ 最耗臨時空間 SQL</h4><p><code>select userid::regrole, dbid, temp_blks_written, query from pg_stat_statements order by temp_blks_written desc limit 50;</code></p>
]]></content>
      <categories>
        <category>PostgreSQL</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>王立、沈伯洋《阿共打來怎麼辦：你以為知道但實際一無所知的台海軍事常識》</title>
    <url>/2023/05/23/Book-002-%E7%8E%8B%E7%AB%8B-%E6%B2%88%E4%BC%AF%E6%B4%8B-%E9%98%BF%E5%85%B1%E6%89%93%E4%BE%86%E6%80%8E%E9%BA%BC%E8%BE%A6/</url>
    <content><![CDATA[<p><a href="https://news.ltn.com.tw/news/politics/breakingnews/4301016">新聞：阿共打來怎麼辦</a>，因為看到這篇新聞，反而引起我的興趣。用物理與地理的實際概念，破除以下十個常見的攻台軍事謠言，這十個謠言，都有其基礎的論述，值得花點時間理解一下。（其實作者還挺風趣）</p>
<ul>
<li>彈道飛彈無敵論</li>
<li>千台無人機癱瘓防禦論</li>
<li>空降部隊奇襲斬首論</li>
<li>直升機快速打擊部隊斬首論</li>
<li>民航機奪取機場論</li>
<li>萬船齊發攻台論</li>
<li>航空母艦夾擊論（台灣東部淪陷論）</li>
<li>貨櫃改裝飛彈船突襲論（美軍航母擊沉論）</li>
<li>近年正夯的巡弋飛彈與長程火箭彈襲台論</li>
<li>萬年不變的經典謠言——封鎖台灣</li>
</ul>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/books/%E9%98%BF%E5%85%B1%E6%89%93%E4%BE%86%E6%80%8E%E9%BA%BC%E8%BE%A6_%20%E7%8E%8B%E7%AB%8B_%E6%B2%88%E4%BC%AF%E6%B4%8B.png"></p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>夏天協奏曲 Summer times</title>
    <url>/2022/08/22/Poem-008-%E5%A4%8F%E5%A4%A9%E5%8D%94%E5%A5%8F%E6%9B%B2-Summer-times/</url>
    <content><![CDATA[<p>用六個連結點<br>就可以關連起妳、我<br>那相遇的島嶼<br>不是只有過客能駐足<br>不是只有旅人能去留</p>
<p>用離開創下的痕跡<br>留下冷漠的心<br>因為感受而感動<br>是夫妻魚的生死相守<br>是夏日精靈的比翼而飛<br>在陽光的祝福下<br>妳的愛情<br>我的愛情<br>發酵、昇華</p>
<p>歌聲唱到了獨自一人的段落<br>用呼喊落出悲傷<br>”到死了，也要飛回來”<br>一個人的時候<br>一樣會想妳</p>
<p>坐在妳的墓前<br>陪妳聊聊天<br>在夕陽的祝福下<br>是一版哀傷的愛情</p>
<pre><code>                一Ｏ年九月三日
</code></pre>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/poem/Poem-008-%E5%A4%8F%E5%A4%A9%E5%8D%94%E5%A5%8F%E6%9B%B2-Summer-times.jpg"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>塩見努《為何買股有90％的人賠錢，卻只有10％的人賺上億？》</title>
    <url>/2023/10/14/Book-003-%E5%A1%A9%E8%A6%8B%E5%8A%AA-%E7%82%BA%E4%BD%95%E8%B2%B7%E8%82%A1%E6%9C%8990%EF%BC%85%E7%9A%84%E4%BA%BA%E8%B3%A0%E9%8C%A2%EF%BC%8C%E5%8D%BB%E5%8F%AA%E6%9C%8910%EF%BC%85%E7%9A%84%E4%BA%BA%E8%B3%BA%E4%B8%8A%E5%84%84%EF%BC%9F/</url>
    <content><![CDATA[<p>1.<em>你已經準備好，在投資戰場「受傷」嗎？</em><br>要有在巿場上受重傷的心理準備，請腳踏實地學習。<br>2. <em>為何散戶會追高殺低？關鍵在「心理素質」</em><br>用「 心法」、「 操作策略」、「資金管理」是一種「 心」、「 體」、「技」的腦內投資組合。<br>3. <em>只要一次金融風暴，就能洗掉90％的投資人</em><br>簡單就能投資，不代表簡單就能獲利，反而很容易虧損。<br>4. <em>高手守則是：「活下來」比每次都贏更重要</em><br>投資沒有例外，要學習、研究累積經驗，再從其中找到新發現，建立自己的腦內投資組合。<br>5. <em>在股市中，只有10％的高手在獲利</em><br>初階投資人(90%) → 中階投資人(9%) → 高階投資人(1%)。<br>6. <em>多數的初學者是在賭博，結果……</em><br>不可沉迷在巿場的刺激感，而是該維持買賣紀律。<br>7. <em>如何避開金融風暴？高手是這麼想的</em><br>市場趨勢改變時，不可以晾著不管！<br>8. <em>你是會主動停損，還是被迫停損？</em><br>一但停損，就要能忘記股價的波動。而且不是因為痛苦而被迫停損！<br>9. <em>當巴菲特都還在努力，你怎能心存僥倖</em><br>尊重巿場、累積經驗、冷靜面對、身體力行去理解知識。不需要常常浮出水面，因為沒必要將自己的事告知他人。<br>10. <em>如何看懂理財書？要思考而不是照做</em><br>把研究到的材料，轉化成自己的腦內投資組合。讀個五十本投資的書吧！<br>11. <em>只想聽明牌？付錢進股友社通常下場是……</em><br>這個只能學到行銷手法而已！<br>12. <em>聽到那個人用5萬賺上億時，你最好……</em><br>這些只是想吸引你的注意力，不能只擷取自己想聽的部份，就開始投資。<br>13. <em>股票令人很HIGH，但靜下來的人才會贏</em><br>選股方法與買賣紀律化十分重要！<br>14. <em>基本面與技術面，差在哪裡？</em><br>利用基本分析濾出有動能的個股、而用技術分析掌握買賣的時機。<br>15. <em>基本面不是看數字，而是該思考背後玄機</em><br>需要看懂數字背後的玄機與趨勢。<br>16. <em>當你知道小道消息時，通常全世界都知道了</em><br>應該是觀察個股的動向、評估會不會獲利。<br>17. <em>技術指標是死的，怎麼活用才是關鍵</em><br>研究自己感興趣的指標，並找到如何建立信心的條件。<br>18. <em>趨勢線怎麼看？壓力與支撐怎麼看？</em><br>雖說是趨勢，但並不會每天都往同一方向發展。要能繪出壓力與支撐的圖形，以分析買賣雙方的交互。<br>19. <em>什麼是跳空下跌？什麼是橫盤整理？</em><br>參考酒井五法。e.g. 「三空」<br>20. <em>我的投資標準1：勝率</em><br>以賠少賺多的買賣紀律反覆操作。e.g. 賺十萬、賠八萬，而不是去在勝率。<br>21. <em>我的投資標準2：盈虧比</em><br>勝時的獲利 vs 敗時的虧損。即使勝率再高，若盈虧比太差，一樣會造成資產縮水。<br>22. <em>我的投資標準3：期待值</em><br>有 73% 的機率可以賺兩萬 vs 有 19% 的機率可以賺八萬。有 73% 的機率可以賺兩萬 (錯時賠五萬) vs 有 19% 的機率可以賺八萬(錯時賠一萬九千)<br>23. <em>短線交易有4種，一般投資人最好不要玩</em><br>「搶帽子：些微波動」「當沖：當天價格波動」「波段：兩到三天波動」「趨勢：數週」<br>24. <em>我用機械化投資法，嚴格執行買賣紀律</em><br>投資要用機率來思考。<br>25. <em>投機者的「大數法則」與贏家的「重複力量」</em><br>投資實際上是重覆而繁瑣的作業。<br>26. <em>別把時間花在買賣上</em><br>長期的持續操作、增加資產，而不是在買賣上。九成時間在準備，買賣只用一成的時間。<br>27. <em>退場時機該如何思考？</em><br>把投資當成一門生意。<br>28. <em>投資如同做生意，成功關鍵在紀律</em><br>投資也是有成本。<br>29. <em>投資如同種葡萄，成功關鍵是時機</em><br>依過去的經驗及知識培養出的基礎來決定理想的時機。<br>30. <em>同一本投資書，高手看門道，但一般人看熱鬧</em><br>這個與哪個有關？必須注意那些地方？變成習慣的問題。<br>31. <em>贏家講求長期獲利，輸家總是短視近利</em><br>有實力的人，會順應環境的變化。<br>32. <em>贏家為目標訂策略，輸家著眼在昨天的輸贏</em><br>釣魚線是否有損傷，是釣魚的基本思考。<br>33. <em>贏家練到「自然反應」，輸家總是「情緒反應」</em><br>不能感情用事，而是要變成為身體的自然反應。<br>34. <em>贏家心理素質高，輸家無法脫離人性</em><br>市場機制裡若採取情緒化的行動，投資就容易蒙受損失。<br>35. <em>贏家孤獨、逆向思考，輸家群聚、一起恐慌</em><br>追求的答案，去面對不確定性。<br>36. <em>散戶習性：溫水煮青蛙法則</em><br>要避免可能還會勝利的想法。<br>37. <em>散戶情緒：大漲興奮、下跌恐懼</em><br>興奮 → 貪心。擔心 → 恐懼。不要想借助別人的力量。<br>38. <em>散戶操作：股價參考點不斷移動，造成大賠</em><br>維持紀律。<br>39. <em>散戶心態：因為希望自己沒錯，才無法正確判斷</em><br>維持現狀的偏執，是人的特性。<br>40. <em>贏家把錢看成是錢，輸家把錢看成花費</em><br>賦與錢不同的意義。<br>41. <em>贏家重「停損」，輸家「等反彈」</em><br>無法決定停損的人，就不應該投資。<br>42. <em>贏家學會「怎麼輸」，輸家在意「輸多少」</em><br>要怎麼輸得漂亮？<br>43. <em>贏家「分批買進」，輸家「越攤越平」</em><br>兩者的差異在於計劃，要分多少部位、多少次增加部位。<br>44. <em>贏家善用「移動停利（損）法」，輸家急著「落袋為安」</em><br>設定獲利了結的作法。e.g. 盈虧比設為1.5，能忍受虧一萬，那獲利到一萬五時，就獲利了結。<br>45. <em>贏家重視資產累積，輸家總是等待奇蹟</em><br>考慮如何獲勝，倒不如考慮不要失敗。<br>46. <em>贏家控制風險，輸家充滿驚險</em><br>把自己分成兩個人，避免潛意識受到主觀的成見或是情感支配。<br>47. <em>贏家等待出手時機，輸家盲目不斷搶進</em><br>釣得到魚的時段！<br>48. <em>贏家培養獨門技巧，輸家只想找別人靠</em><br>擁有自己的操作邏輯。<br>49. <em>贏家面對市場很「老實」，輸家面對市場卻「自以為是」</em><br>計算很重要，儘量將可以量化的，都數字化。<br>50. <em>投資其實是「一輩子」的事</em><br>生活品質與投資不能有衝突。<br>51. <em>製作你自己的「金錢使用說明書」</em><br>扣除必要支出、儲蓄，再思考投資的操作。<br>52. <em>利用小額投資，試煉自己的「買賣邏輯」</em><br>精神上比較容易支撐。<br>53. <em>只用閒置資金投資，買賣務必做好紀錄</em><br>思考要拿多少錢出來投資。<br>54. <em>投資組合須年年檢視，並且「再平衡」</em><br>將各式的金融商品，加以組合。<br>55. <em>練久了，投資風格會自然形成不須強求</em><br>屬於自己的投資方法，會隨時隨地在改變，沒有終點。<br>56. <em>避險1：在投資組合中增加避險標的</em><br>投資組合的重要性，必須合適當時的巿場局面。<br>57. <em>避險2：空頭時，要有「放空」的勇氣</em><br>作多／放空股票，是避險的一種策略。<br>58. <em>避險3：狡兔三窟，善用分散策略</em><br>市場不斷的變化，所以只用一種戰術很危險。<br>59. <em>搞懂每種金融商品，作為自己的投資筆記</em><br>讓腦海可自然而然將各種商品的特徵及買賣策略分門別類。<br>60. <em>找出適合自己的金融商品，並樹立自己的投資風格</em><br>找出適合自己的投資手法與金融商品。<br>61. <em>金融商品越簡單，風險就越單純</em><br>適合用來學習投資的金融商品有一個要素，就是簡單。<br>62. <em>投資基金的5個注意事項</em><br>不要任營業員擺布<br>正在流行的，都己經退流行了<br>別輕信專業<br>理解方針<br>風險管理<br>63. <em>會配息的基金，其實很複雜</em><br>不容易理解分配的結構與風險。<br>64. <em>定期定額雖簡單，能否持續是關鍵</em><br>定期定額可以壓低平均購買單價。<br>65. <em>沒有投資計畫，不如先定期定額儲蓄</em><br>定期存到一筆資金後，再進行投資。<br>66. <em>別用投資股票的方式，規劃自己的退休金</em><br>67. <em>當你是為了拿股東贈品而買時，就得……</em></p>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/books/%E7%82%BA%E4%BD%95%E8%B2%B7%E8%82%A1%E6%9C%8990%EF%BC%85%E7%9A%84%E4%BA%BA%E8%B3%A0%E9%8C%A2%EF%BC%8C%E5%8D%BB%E5%8F%AA%E6%9C%8910%EF%BC%85%E7%9A%84%E4%BA%BA%E8%B3%BA%E4%B8%8A%E5%84%84%EF%BC%9F-%20%E5%A1%A9%E8%A6%8B%E5%8A%AA.png"></p>
]]></content>
      <categories>
        <category>Investment</category>
      </categories>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title>Java threads</title>
    <url>/2023/05/17/Java-004-Threads/</url>
    <content><![CDATA[<p>要創建線程（實現 Callable 接口或者 Runnable 接口），然後通過提交給線程池 ( ExecutorService Pool )去執行。若不使用線程池</p>
<h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>先實作Runnable的RunnableTaskA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTaskA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;RunnableTaskA start&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;RunnableTaskA end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然後實作主線程與異步線程的程式，main thread 的執行過程中，呼叫異步任務RunnableTaskA。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableTask</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// set Pool</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Thread tasks</span></span><br><span class="line">    <span class="type">RunnableTaskA</span> <span class="variable">taskA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableTaskA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// submit thread</span></span><br><span class="line">    threadPool.submit(taskA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// close pool</span></span><br><span class="line">    threadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main thread</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;main thread is done.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果：</p>
<blockquote>
<p>22:49:32 INFO 2-thread-1 t.callable.RunnableTaskA      :12  RunnableTaskA start<br><br>22:49:34 INFO main       t.callable.RunnableTask       :39  main thread is done.<br><br>22:49:37 INFO 2-thread-1 t.callable.RunnableTaskA      :18  RunnableTaskA end<br></p>
</blockquote>
<p>由RunnableTaskA是實作Runnable，故無法返回任何結果。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Dart</title>
    <url>/2023/05/02/Dart-001-Hello-Dart/</url>
    <content><![CDATA[<p>Dart是一種開源的通用程式設計語言。 它最初由Google開發，後來被ECMA批准為標準。</p>
<p> Dart是一種物件導向的語言，具有C語言風格的語法，可以選擇將它編譯成JavaScript。它支援各種程式設計輔助工具。</p>
<p> 相關資源</p>
<ul>
<li><p><a href="https://dart.dev,/" title="Dart">Dart 官網</a></p>
</li>
<li><p><a href="https://dartpad.dartlang.org,/" title="DartPad">DartPad</a></p>
</li>
</ul>
<ol>
<li><p>變數宣告<br> dart主要有四種方式宣告變數，分別為 const、var、type、final</p>
</li>
<li><p>Dart識別符號</p>
<ul>
<li>識別符號可以包括字元和數位。但是，識別符號不能以數位開頭。</li>
<li>除 _ 或 $ 外，識別符號不能包含特殊符號。</li>
<li>不能是關鍵字。</li>
<li>必須是唯一的。</li>
<li>區分大小寫。</li>
<li>不能包含空格。</li>
</ul>
</li>
<li><p>常用型別</p>
<ul>
<li>int, double</li>
<li>String</li>
<li>bool</li>
<li>List</li>
<li>Set</li>
<li>Map</li>
<li>Runes</li>
<li>Symbol</li>
<li>Null</li>
</ul>
<p>基本範例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String name = &quot;BK&quot;;     // Strings</span><br><span class="line">int age = 8;            // Numbers </span><br><span class="line">bool funny = false;     // Boolean</span><br><span class="line">List hobbies = [        // Lists</span><br><span class="line">	&quot;playing&quot;,</span><br><span class="line">	&quot;coding&quot;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">	print(&quot;name: $name ($&#123;name.runtimeType&#125;)&quot;);</span><br><span class="line">	print(&quot;age: $age ($&#123;age.runtimeType&#125;)&quot;);</span><br><span class="line">	print(&quot;hobbies: $hobbies ($&#123;hobbies.runtimeType&#125;)&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name: BK (String)<br>    age: 8 (int)<br>    hobbies: [playing, coding] (JSArray<dynamic>)	</p>
</li>
<li><p>流程控制</p>
</li>
</ol>
<ul>
<li><p>for </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  for (int i=0; i&lt;３; ++i) &#123;</span><br><span class="line">    print(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>while</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> void main() &#123;</span><br><span class="line">  int i = 0;</span><br><span class="line">  while (i &lt; 3) &#123;</span><br><span class="line">    print(i);</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if else , continue and break </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  int i = 0;</span><br><span class="line">  while (i &lt; 30) &#123;</span><br><span class="line">    ++i;</span><br><span class="line">    if (i &lt; 20) &#123;</span><br><span class="line">      continue;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (i == 28) &#123;</span><br><span class="line">      break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    print(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>Function<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum(int a, int b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  int a = 1;</span><br><span class="line">  int b = 2;</span><br><span class="line">  int c = sum(a, b);</span><br><span class="line">  </span><br><span class="line">  print(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Class<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class human &#123;</span><br><span class="line">  String name = &quot;&quot;;</span><br><span class="line">  int age = 0;</span><br><span class="line">  </span><br><span class="line">  human(String name, int age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Method</span><br><span class="line">  void info() &#123;</span><br><span class="line">    print(&quot;My name is $&#123;this.name&#125;&quot;);</span><br><span class="line">    print(&quot;I am $&#123;this.age&#125; years old.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line"> </span><br><span class="line">  var bk = human(&quot;bk&quot;, 8);</span><br><span class="line">  var benetta = human(&quot;benetta&quot;, 3);</span><br><span class="line">  </span><br><span class="line">  bk.info();</span><br><span class="line">  benetta.info();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>App</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>The Five People You Meet in Heaven</title>
    <url>/2023/01/14/Poem-014-The-Five-People-You-Meet-in-Heaven/</url>
    <content><![CDATA[<p>壹、The Blue Man</p>
<p>無語<br>帶來聆聽的心，清晰著<br>對方的言語</p>
<p>演著的故事<br>是你看著？還是我看著？<br>同一齣吧？在重疊的時間軸上！</p>
<p>貳、The Captain</p>
<p>時間的容貎<br>在腦海裡變化，一直一直<br>如何才能停駐讓人看清、看懂</p>
<p>痛苦乘除延續的等式<br>擺在眼前是想像？<br>還是真實？</p>
<p>給了或失去？<br>四下無聲之中清晰。</p>
<p>  參、Ruby</p>
<p>摒住氣息<br>平靜才不會受驚嚇<br>已走過的故事<br>偷偷刻劃著未來的線條</p>
<p>惱火<br>抽出了雙面刃<br>還是收入劍鞘？</p>
<p>解開綁在身上的結<br>掉落的繩，織起湖的鏡面</p>
<p>肆、Marguerite</p>
<p>路，有終點<br>仍可以遠眺</p>
<p>失去的得到<br>得到的失去</p>
<p>譜上一曲與回憶共舞<br>愛，只是換了裝扮。</p>
<p>伍、 Tala girl</p>
<p>哪裡有個位置？<br>在遍尋不著之際</p>
<p>就算是一朵不知名的花<br>不會莫名奇妙地生長綻放</p>
<p>末、Eddie</p>
<p>成了個圓<br>帶著點寧靜的副作用。</p>
<pre><code>                一一一年九月二十六日
</code></pre>
<p><img src="https://github.com/benjamin-kuo/images/blob/main/poem/Poem-014-The-Five-People-You-Meet-in-Heaven.jpg?raw=true"></p>
]]></content>
      <categories>
        <category>Poem</category>
      </categories>
      <tags>
        <tag>Poem</tag>
      </tags>
  </entry>
  <entry>
    <title>Microservices CAP &amp; BASE</title>
    <url>/2023/05/05/MicroService-001-CAP-BASE/</url>
    <content><![CDATA[<h2 id="CAP-Theorem"><a href="#CAP-Theorem" class="headerlink" title="CAP Theorem"></a>CAP Theorem</h2><p>　　CAP Theorem 又被稱為布魯爾定理，由 Eric A. Brewer 所提出，應用於分佈式系統，即分佈式系統只能提供三個所需特性中的兩個：一致性、可用性和分區容錯性（CAP 中的“C”、“A”和“P” )。此理論之後被 Seth Gilbert 及 Nancy Lynch 兩位 MIT的教授證明。（<a href="https://users.ece.cmu.edu/~adrian/731-sp04/readings/GL-cap.pdf">Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services</a>）</p>
<ul>
<li>一致性（Consistency）：客戶端無論連接到哪個節點，所有客戶端時看到的數據都一致。</li>
<li>可用性（Availability）：即使一個或多個節點已關閉，任何發出數據請求的客戶端都依然能得到響應。</li>
<li>分區容錯性（Partition tolerance）：儘管系統中的節點之間存在任何數量的通信故障，集群必須能持續運作。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/turtorial/CAP.png" alt="Image"></p>
<p>理解 CAP 定理後，有利於進入設計微服務（Microservices）應用程序時選擇需要的方案。若水平擴展的能力對應用服務至關重要，而容忍最終（而不是嚴格）一致性，則像 Cassandra 數據庫可以滿足AP；另一方面，如果應用服務嚴重依賴數據一致性（如在電子商務應用程序或支付服務中），則選擇 PostgreSQL 類的關係數據庫可達到CP。</p>
<p>然而實際在設計一個微服務系統時，常常不是唯一的CP或是AP；某些服務可能必要CP，而可能有些服務則側重在AP，整個系統就成了一種混合式的模式。</p>
<h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><p>BASE理論，一樣由 Eric A. Brewer 所提出，可算是CAP理論的延伸，主要目的在於補足無法作到嚴格一致性（Strong Consistency）, 但可以用適當的方式達成最終一致性（Eventually Consistency）與可用性（Availability）。</p>
<ul>
<li>基本可用（Basically Available）：在出現故障時，允許損失部分可用性，但保證核心可用。</li>
<li>軟狀態（Soft State）：允許系統中的數據存在中間狀態，即允許系統在多個不同節點的數據副本存在數據延遲。</li>
<li>最終一致性（Eventual Consistency）：系統裡所有資料經過一定時間後，最終能夠達到一致的狀態。</li>
</ul>
<p>所以在某些大型系統的設計，為補足CP部份，則會擇中採用一些特定方法，達到 Base 的最終一致性。當然前提也是系統需能接受在達到最終一致性前，可能在使用某節點的結果集會有不同的情況。</p>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>Cardinal points of Spring Cache Annotations</title>
    <url>/2023/05/16/Spring-001-Cache-Annotations/</url>
    <content><![CDATA[<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p> Spring 和 Spring Boot 提供了快取機制，可以輕鬆地對系統添加需要的快取。以下是相關的 Annotation。</p>
<ol>
<li>@EnableCaching：將此 annotation 加入 Spring Project 裡的設定類裡。</li>
<li>@Cacheable：在需快取資料的 method，加入此 annotation。</li>
<li>@CachePut：在需要更新 cache 的 method，加入此 annotation。 </li>
<li>@CacheEvict ：在需要移除 cache 的 method，加入此 annotation。</li>
</ol>
<h2 id="Why-Caching"><a href="#Why-Caching" class="headerlink" title="Why Caching"></a>Why Caching</h2><p>為什麼要使用快取？</p>
<ul>
<li>提高性能：減少從資料庫或其他外部源獲取數據所需的時間來提高系統的性能。</li>
<li>減少外部資源的負載：將頻繁訪問的資料存儲在快取中，可以減少外部資源的負載。</li>
<li>提高可伸縮性：減少系統和外部資源需要完成的工作量，提高系統的可伸縮性。</li>
<li>更好的用戶體驗：更快響應時間可以帶來更好的用戶體驗。</li>
</ul>
<h2 id="When-Caching"><a href="#When-Caching" class="headerlink" title="When Caching"></a>When Caching</h2><p>什麼時候使用快取呢？</p>
<p>經常訪問查詢成本相對較高的數據（例如資料庫查詢或 Web 服務請求）時使用快取。然而，要注意快取不是靈丹妙藥，並非所有資料都適合快取。例如，頻繁更新的資料就不適合快取。</p>
<h2 id="適用場景"><a href="#適用場景" class="headerlink" title="適用場景"></a>適用場景</h2><ul>
<li>只快取經常讀取的數據：可以顯著提高性能，但只快取經常訪問的資料很重要，很少或從不訪問的快取數據會佔用寶貴的記憶體，而導致性能問題。</li>
<li>根據系統需求選擇合適的快取策略。 Spring Boot 支持多種快取機制的配合，包括 Ehcache、Hazelcast 和 Redis。</li>
<li>使用快取時的潛在線程安全問題：對快取的並發查詢可能會導致數據不一致，因此必要時使用適當的同步機制非常重要。</li>
<li>避免過度快取：快取對於提高性能很有用，但過多的快取實際上會消耗寶貴的記憶體資源，可能導致性能上的問題。</li>
<li>快取逐出（Evict）策略：定義適當的快取逐出策略，確保從快取中刪除舊的或無用的資料。</li>
<li>快取鍵（Key）設計：快取鍵對於每個資料項都應該是唯一的。</li>
</ul>
<h2 id="潛在的問題"><a href="#潛在的問題" class="headerlink" title="潛在的問題"></a>潛在的問題</h2><ul>
<li>Spring Cache 預設：使用 ConcurrentHashMap，它不會自動回收，若使用默認的這個緩存，可能因為沒到回收，最終可能導致OOM（Out of Memory）。</li>
<li>舊資料：若快取資料不定期更新，可能導致將不正確或過時的資料返回給客戶端。</li>
<li>記憶體消耗：如果快取管理不當，會消耗大量記憶體資源。。</li>
<li>快取鍵（Key）衝突：如果快取鍵沒有明確定義，可能會導致鍵衝突。</li>
<li>序列化問題：如果快取的對像不可序列化，則可能導致序列化錯誤。</li>
<li>網絡延遲：如果快取提供程序（如 Redis）與系統不在同一台機器上運行，網絡延遲可能成為瓶頸並降低快取的有效性。</li>
<li>@Cacheable 失效：私有方法不支援 @Cacheable，Spring cache 的實現原理是基於 AOP 的動態代理實現的，AOP 不支持對 private 私有方法的攔截，所以@Cacheable 亦會失效。</li>
</ul>
<p>　　總的來說，在避免可能的潛在問題之下，cache annotations 的運用可以顯著提高 Spring &amp; Spring Boot 系統的性能與響應時間，從而提供出色的用戶體驗。</p>
]]></content>
      <categories>
        <category>Java, Spring</category>
      </categories>
      <tags>
        <tag>Java, Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>What Is APIOps？什麼是APIOps？</title>
    <url>/2023/04/05/DevOps-001-What-Is-APIOps-%E4%BB%80%E9%BA%BC%E6%98%AFAPIOps/</url>
    <content><![CDATA[<p>作者：David Mckenna<br>譯者：B.K.</p>
<p>自從首次引入 DevOps 一詞以來，新的“Ops”相關術語似乎與技術趨勢一樣迅速湧現。例如：</p>
<ul>
<li>AIOP：使用 AI 對各種 IT 流程提升與自動化。</li>
<li>MLOps：對機器學習的開發、部署和管理。</li>
<li>FinOps：優化和管理雲的成本。 </li>
<li>DevSecOps：對軟體的開發與開發生命週期 (SDLC)，將安全性整合其中。</li>
<li>GitOps：使用 Git 管理和部署基礎架構和應用程序（程式碼和配置）。</li>
</ul>
<p>作者打賭下一個與 Ops 相關的術語將是 ChatGPT-Ops ;-)。最近幾個月出現的一個 OP 術語是 APIOps，特別是 API 不是新的並且有許多不同的風格之下，它是什麼意思呢？</p>
<p>APIOps 是一種在部署 API 時利用 GitOps 和 DevOps 原則的方法。與 DevOps 類似，APIOps 有助於簡化修改並將 API 更改自動部署到產品中。就像 DevOps 一樣，自動化是 APIOps 的關鍵，但要在 APIOps 上取得成功，必須考慮的不僅僅是自動化。也需要採用與CALMS相關的原則才能成功。<br>文化</p>
<p><img src="https://dz2cdn1.dzone.com/storage/temp/16736746-1677721880598.png"></p>
<p>您應該將 API 視為產品。這意味著需要遠離技術。</p>
<p>API 不應僅僅被視為一項 Jira task，也不應僅是軟體工程師的唯一職責。API 應該有一個產品經理來幫助其成功。API產品應要有將具有產品路線、生命週期和商業的成功標準。</p>
<p><strong>自動化(Automation)</strong></p>
<p>DevOps 團隊使用<a href="https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance">DORA指標</a>（DevOps 研究和評估）來衡量他們的績效，並確定他們是否屬於“低績效”或“精英績效”的類別。採用 DORA 指標可以深入了解 CI&#x2F;CD 管道的交付性能，從而將 API 投入產品。</p>
<p><strong>DORA 指標：</strong></p>
<ul>
<li>部署頻率(Deployment Frequency)：組織成功發佈到產品的頻率。</li>
<li>變動的前置時間(Lead Time for Changes)：承諾轉入為產品所需的時間。</li>
<li>變更失敗率(Change Failure Rate)：導致產品部署失敗的百分比。</li>
<li>恢復服務的時間(Time to Restore Service)：組織從生產故障中恢復所需的時間。</li>
</ul>
<p>透過 DORA 指標時，請確保所有的項目以API視角都有包含進去。例如，將對 API 約定的重大變更引入產品應該包含在“變更失敗率”指標中，尤其是在變更不受管理的情況下。</p>
<p><strong>精益(Lean )</strong> </p>
<p>成功意味著採用精益方法( lean approach)消除浪費，並專注於快速、持續地為客戶提供價值。例如一棵樹倒在森林裡，會發出聲音嗎？同樣，如果一個 API 沒有在產品中使用，會有人關心嗎？不要急於實作 API 服務；首先，要先確認成功標準。應等到潛在消費者檢視審和批准後再實作 API 。例如，來自消費者的早期反饋顯示 API 將解決他們的使用案例或痛點。 </p>
<p><strong>衡量(Measure)</strong></p>
<p>技術 KPI 是任何 API 程式的籌碼；包括每秒事務數(transactions per second)、錯誤率(error rate)、延遲(latency)以及您提供給消費者的 API 的服務級別協定(SLA)的追蹤。此外，需要包括更多業務級目標，以進入下一個衡量<strong>真正重要</strong>事項的級別。以下是一些可以追蹤的例子：</p>
<ul>
<li><p>RoI（投資回報率）KPI 是 API 有助於推動直接或間接收入增長，如果達到 API 重用的必殺技，則可以降低成本等。 </p>
</li>
<li><p>消費(Consumption ) KPI：每月的 API 流量增長趨勢如何，或者 API 是否有助於發展組織的合作夥伴生態系統？ </p>
</li>
<li><p>約定(Engagement ) KPI： API 的 NPS（淨推薦值，Net Promoter Score），當 API 是的產品時，是否會追蹤保留(retention )和流失(churn)？</p>
</li>
</ul>
<p><strong>分享</strong></p>
<p>無論 API 的目標是私有（在組織內使用）、合作夥伴（由組織的合作夥伴使用）還是公共（由對 API 感興趣的任何人使用），都必須有一個工具來共享您的 API 並讓您從您的 API 消費者那裡接收反饋。此工具將是內部 API 開發人員進入入口(Portals)或公共市場(Public Marketplace)，API使用者可以在其中以發現&#x2F;加入&#x2F;註冊使用 。同樣重要的是，對於 API 的演進，要能夠提供作為 API 使用者有關 API 的反饋，以便可以朝著適當的方向演進。</p>
<p>將上述 DevOps 原則應用於 API 生命週期，APIOps 可以幫助組織改善協作、縮短上市時間、提供更好的客戶體驗，並最終獲得更好的業務結果。</p>
<p><a href="https://dzone.com/articles/what-is-apiops-and-how-to-be-successful-at-apiops">原文出處</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Database、Data Warehouse、Data Lake</title>
    <url>/2024/02/05/Data-001-Database-DataWarehouseDataLake/</url>
    <content><![CDATA[<ul>
<li><p>Data Base</p>
<ul>
<li>這裡泛指關聯式資料庫（先不討論NoSQL或 NewSQL）</li>
<li>設計來擷取資料或記錄，通常也包含線上交易處理（OLTP, Online Transaction Processing）</li>
<li>即時資料</li>
<li>記錄以資料表的列與欄方式儲存</li>
<li>是高度詳細的資料</li>
<li>Schema 可很彈性的進行設計 （用以表示資料如合被儲存）</li>
<li>大資料量時，反應速度緩慢</li>
</ul>
</li>
<li><p>Data Warehouse</p>
<ul>
<li>用以進行資料分析，通常也是線上分析處理（OLAP, Online analytical processing）</li>
<li>資料經由原始資料、歷史資料進行重整</li>
<li>資料已被簡化、小結。</li>
<li>資料一經整理，就不太會再變動</li>
<li>資料源可來自多個或不同的資料庫等等，透過E（Extract）、T（Transform）、L（load）匯整資料</li>
<li>大資料量時，反應速度速快，因為是直接呈現</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/benjamin-kuo/images/main/turtorial/DataWarehouse.png" width="50%" height="50%">

<ul>
<li>Data Lake<ul>
<li>設計來儲存多元化的raw data（有結構到無結構的資料均可），可是是文字、檔案、音源等等</li>
<li>也是有大量的資料</li>
<li>透過 Machine Learning 或AI來分析</li>
<li>可將分析後的結果轉存於 Data Base 或 Data Warehouse</li>
</ul>
</li>
</ul>
<p> 三者並沒有明顯誰優於優的問題。而是針對要解決的問題是什麼。解決過程可採用單一方案，甚至是混合型方案都可以。</p>
]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>Data Science</tag>
      </tags>
  </entry>
</search>
